// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EstimateBetaMDESimple
arma::mat EstimateBetaMDESimple(arma::mat Y, arma::mat X, arma::mat D, arma::mat b0, int iter, double critVal, int type, double HuberC);
RcppExport SEXP _KoulMde_EstimateBetaMDESimple(SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP b0SEXP, SEXP iterSEXP, SEXP critValSEXP, SEXP typeSEXP, SEXP HuberCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type critVal(critValSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type HuberC(HuberCSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimateBetaMDESimple(Y, X, D, b0, iter, critVal, type, HuberC));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KoulMde_EstimateBetaMDESimple", (DL_FUNC) &_KoulMde_EstimateBetaMDESimple, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_KoulMde(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
